name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read # actions/checkout のために必要

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Java
      uses: actions/setup-java@v3.0.0
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        ./gradlew addExtension --extensions="container-image-jib"
        ./gradlew build -Dquarkus.container-image.build=true -Dquarkus.container-image.group=$ECR_REGISTRY -Dquarkus.container-image.tag=latest
        docker tag $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
        echo "::set-output name=image::$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"
